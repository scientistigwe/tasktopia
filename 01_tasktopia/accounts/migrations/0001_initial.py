# Generated by Django 5.0.6 on 2024-06-20 19:25

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(help_text='Required. Enter a valid email address.', max_length=225, unique=True)),
                ('first_name', models.CharField(help_text='Required. Enter your first name.', max_length=225)),
                ('last_name', models.CharField(help_text='Required. Enter your last name.', max_length=225)),
                ('phone_number', models.CharField(blank=True, help_text='Optional. Enter your phone number.', max_length=20, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='The date and time the user joined.')),
                ('last_login', models.DateTimeField(auto_now=True, help_text='The date and time of the last login.')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into the admin site.')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_profiles', related_query_name='user_profile', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_profiles', related_query_name='user_profile', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
